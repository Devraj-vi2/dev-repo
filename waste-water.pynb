#  Wastewater Quality Monitoring with Machine Learning

This notebook demonstrates the prediction of COD (Chemical Oxygen Demand) using machine learning, based on synthetic sensor data.
 notebook.ipynb
âœ… Cell 1 â€“ Markdown (Title)

#  Wastewater Quality Monitoring with Machine Learning

This notebook demonstrates the prediction of COD (Chemical Oxygen Demand) using machine learning, based on synthetic sensor data.
âœ… Cell 2 â€“ Code (Import & Load Dataset)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv("data/wastewater_quality_data.csv")
df.head()
âœ… Cell 3 â€“ Markdown

## ðŸ“Š Exploratory Data Analysis
âœ… Cell 4 â€“ Code (EDA)

# Check data types and missing values
df.info()

# Basic stats
df.describe()
âœ… Cell 5 â€“ Code (Correlation Matrix)
# Correlation matrix
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Matrix")
plt.show()

âœ… Cell 6 â€“ Markdown
## ðŸ§  Train Random Forest for COD Prediction

âœ… Cell 7 â€“ Code (Model Training & Evaluation)
# Features and target
X = df[['Temperature (C)', 'pH', 'Turbidity (NTU)', 'Dissolved Oxygen (mg/L)', 'Conductivity (uS/cm)']]
y = df['COD (mg/L)']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

âœ… Cell 8 â€“ Markdown
## ðŸ“Œ Feature Importance

âœ… Cell 9 â€“ Code (Feature Importance Plot)
# Feature Importance
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances}).sort_values(by='Importance', ascending=False)

sns.barplot(data=importance_df, x='Importance', y='Feature', palette='viridis')
plt.title("Feature Importance")
plt.show()

âœ… Cell 10 â€“ Markdown
## ðŸ“ˆ Actual vs. Predicted COD

âœ… Cell 11 â€“ Code (Prediction Visualization)
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r')
plt.xlabel('Actual COD (mg/L)')
plt.ylabel('Predicted COD (mg/L)')
plt.title('Actual vs. Predicted COD')
plt.grid(True)
plt.tight_layout()
plt.show()

